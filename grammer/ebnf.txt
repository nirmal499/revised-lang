
program := declaration* EOF
    ;

declaration :=  funDeclStmt
    | statement
    ;

funDeclStmt := "function" function
    ;

function := IDENTIFIER "(" parameters? ")" type blockStmt
    ;

parameters := IDENTIFIER type ( "," IDENTIFIER type )*
    ;

type := (":" IDENTIFIER)?
    ;

statement := exprStmt
    | ifStmt
    | returnStmt
    | breakStmt
    | continueStmt
    | whileStmt
    | varDeclStmt
    | blockStmt;
    ;

varDeclStmt := "var" IDENTIFIER type "=" expression ";"
    ;

returnStmt := "return" expression ";"
    ;

breakStmt := "break" ";"
    ;

continueStmt := "continue" ";"
    ;

whileStmt := "while" "(" expression ")" statement
    ;

ifStmt := "if" "(" expression ")" statement ( "else" statement )?
    ;

blockStmt := "{" statement* "}"
    ;

exprStmt := expression ";"
    ;
    
expression := assignment
    ;

/* Here IDENTIFIER is a VariableExpression */
assignment :=
    IDENTIFIER "=" assignment
    | logic_or
    ;

logic_or := logic_and ( "or" logic_and )*
    ;

logic_and := equality ( "and" equality )*
    ;

equality := comparison ( ( "!=" | "==" ) comparison )*
    ;

comparison := term ( ( ">" | ">=" | "<" | "<=" ) term )*
    ;

term := factor ( ( "-" | "+" ) factor )*
    ;

factor := unary ( ( "/" | "*" ) unary )*
    ;

unary := ( "!" | "-" | "+" ) unary | call
    ;

call := primary ( "(" arguments? ")" )*
    ;

arguments := expression ( "," expression )*
    ;

primary := NUMBER
    | STRING
    | BOOLEAN
    | "(" expression ")"
    | IDENTIFIER
    ;