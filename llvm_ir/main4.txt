; ModuleID = 'trylang'
source_filename = "trylang"

@falseConstantStringVALUE = global [6 x i8] c"false\00"
@trueConstantStringVALUE = global [5 x i8] c"true\00"
@b = global i32 34
@VERSION = global i32 648
@0 = private unnamed_addr constant [10 x i8] c"Value is \00", align 1
@1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @fgets(i8*, i32, i8*)

declare i32 @strlen(i8*)

declare i32 @atoi(i8*)

declare i32 @snprintf(i8*, i64, i8*, ...)

declare i8* @malloc(i64)

declare i8* @strcat(i8*, i8*)

declare i8* @strcpy(i8*, i8*)

define i32 @showA() {
entry:
  %b = load i32, i32* @b, align 4
  %buffer = alloca i8, i32 32, align 1
  %formattedString = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %buffer, i64 32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0), i32 %b)
  %leftLen = call i32 @strlen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i32 0, i32 0))
  %rightLen = call i32 @strlen(i8* %buffer)
  %totalLen = add i32 %leftLen, %rightLen
  %totalLenWithNull = add i32 %totalLen, 1
  %totalLenI64 = zext i32 %totalLenWithNull to i64
  %rawPtrBuffer = call i8* @malloc(i64 %totalLenI64)
  %0 = call i8* @strcpy(i8* %rawPtrBuffer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i32 0, i32 0))
  %1 = call i8* @strcat(i8* %rawPtrBuffer, i8* %buffer)
  %2 = call i32 (i8*, ...) @printf(i8* %rawPtrBuffer)
  ret i32 1
}

define i32 @main() {
entry:
  %0 = call i32 @showA()
  %1 = call i32 @showA()
  ret i32 0
}
